"use strict";
var observable_array_1 = require("data/observable-array");
var frame = require("ui/frame");
var closeCallback;
var array;
function onPageLoaded(args) {
    var page = args.object;
    array = new observable_array_1.ObservableArray();
    array.push({ title: "Title1", style: 'notselected' });
    array.push({ title: "Title2", style: 'notselected' });
    page.bindingContext = { myItems: array };
}
exports.onPageLoaded = onPageLoaded;
function onShowingModally(args) {
    console.log(">>> login-page.onShowingModally");
}
exports.onShowingModally = onShowingModally;
function onShownModally(args) {
    console.log(">>> login-page.onShownModally, context: " + args.context);
    var selected = parseInt(args.context);
    // console.log(selected);
    if (selected > -1) {
        console.log("here");
        console.log(selected);
        array.getItem(selected).style = "selected";
    }
    closeCallback = args.closeCallback;
    var modalPage = args.object;
    if (frame.topmost().currentPage.modal !== args.object) {
        throw new Error("Error");
    }
}
exports.onShownModally = onShownModally;
function listViewItemTap(args) {
    console.log("list view item select");
    console.log(args.index);
    closeCallback("" + args.index);
}
exports.listViewItemTap = listViewItemTap;
function onTap1() {
    closeCallback("go back");
}
exports.onTap1 = onTap1;
function onTap2() {
    closeCallback("next page");
}
exports.onTap2 = onTap2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWxWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kYWxWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpQ0FBZ0MsdUJBQXVCLENBQUMsQ0FBQTtBQUd4RCxJQUFPLEtBQUssV0FBVyxVQUFVLENBQUMsQ0FBQztBQUduQyxJQUFJLGFBQXVCLENBQUM7QUFDNUIsSUFBSSxLQUFLLENBQUM7QUFDVixzQkFBNkIsSUFBSTtJQUM3QixJQUFJLElBQUksR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ25DLEtBQUssR0FBRyxJQUFJLGtDQUFlLEVBQUUsQ0FBQztJQUM5QixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUN0RCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUt0RCxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBSzdDLENBQUM7QUFkZSxvQkFBWSxlQWMzQixDQUFBO0FBR0QsMEJBQWlDLElBQWU7SUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBRW5ELENBQUM7QUFIZSx3QkFBZ0IsbUJBRy9CLENBQUE7QUFFRCx3QkFBK0IsSUFBc0I7SUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkUsSUFBSSxRQUFRLEdBQVcsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5Qyx5QkFBeUI7SUFHekIsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO0lBQy9DLENBQUM7SUFDRCxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUVuQyxJQUFJLFNBQVMsR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0IsQ0FBQztBQUVMLENBQUM7QUFwQmUsc0JBQWMsaUJBb0I3QixDQUFBO0FBRUQseUJBQWdDLElBQW1CO0lBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixhQUFhLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBSmUsdUJBQWUsa0JBSTlCLENBQUE7QUFFRDtJQUNJLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRmUsY0FBTSxTQUVyQixDQUFBO0FBRUQ7SUFDSSxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFL0IsQ0FBQztBQUhlLGNBQU0sU0FHckIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGVBcnJheSB9IGZyb20gXCJkYXRhL29ic2VydmFibGUtYXJyYXlcIjtcbmltcG9ydCB7IFBhZ2UsIFNob3duTW9kYWxseURhdGEgfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIEV2ZW50RGF0YSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCBmcmFtZSA9IHJlcXVpcmUoXCJ1aS9mcmFtZVwiKTtcbmltcG9ydCB7IExpc3RWaWV3LCBJdGVtRXZlbnREYXRhIH0gZnJvbSAndWkvbGlzdC12aWV3JztcblxudmFyIGNsb3NlQ2FsbGJhY2s6IEZ1bmN0aW9uO1xudmFyIGFycmF5O1xuZXhwb3J0IGZ1bmN0aW9uIG9uUGFnZUxvYWRlZChhcmdzKSB7XG4gICAgdmFyIHBhZ2U6IFBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBhcnJheSA9IG5ldyBPYnNlcnZhYmxlQXJyYXkoKTtcbiAgICBhcnJheS5wdXNoKHsgdGl0bGU6IFwiVGl0bGUxXCIsIHN0eWxlOiAnbm90c2VsZWN0ZWQnIH0pO1xuICAgIGFycmF5LnB1c2goeyB0aXRsZTogXCJUaXRsZTJcIiwgc3R5bGU6ICdub3RzZWxlY3RlZCcgfSk7XG5cblxuXG5cbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0geyBteUl0ZW1zOiBhcnJheSB9O1xuXG5cblxuXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG9uU2hvd2luZ01vZGFsbHkoYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc29sZS5sb2coXCI+Pj4gbG9naW4tcGFnZS5vblNob3dpbmdNb2RhbGx5XCIpO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblNob3duTW9kYWxseShhcmdzOiBTaG93bk1vZGFsbHlEYXRhKSB7XG4gICAgY29uc29sZS5sb2coXCI+Pj4gbG9naW4tcGFnZS5vblNob3duTW9kYWxseSwgY29udGV4dDogXCIgKyBhcmdzLmNvbnRleHQpO1xuXG4gICAgdmFyIHNlbGVjdGVkID0gPG51bWJlcj5wYXJzZUludChhcmdzLmNvbnRleHQpO1xuICAgIC8vIGNvbnNvbGUubG9nKHNlbGVjdGVkKTtcblxuXG4gICAgaWYgKHNlbGVjdGVkID4gLTEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJoZXJlXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZCk7XG4gICAgICAgIGFycmF5LmdldEl0ZW0oc2VsZWN0ZWQpLnN0eWxlID0gXCJzZWxlY3RlZFwiO1xuICAgIH1cbiAgICBjbG9zZUNhbGxiYWNrID0gYXJncy5jbG9zZUNhbGxiYWNrO1xuXG4gICAgdmFyIG1vZGFsUGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuXG4gICAgaWYgKGZyYW1lLnRvcG1vc3QoKS5jdXJyZW50UGFnZS5tb2RhbCAhPT0gYXJncy5vYmplY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvcmApO1xuICAgIH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdFZpZXdJdGVtVGFwKGFyZ3M6IEl0ZW1FdmVudERhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhcImxpc3QgdmlldyBpdGVtIHNlbGVjdFwiKTtcbiAgICBjb25zb2xlLmxvZyhhcmdzLmluZGV4KTtcbiAgICBjbG9zZUNhbGxiYWNrKFwiXCIgKyBhcmdzLmluZGV4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFwMSgpIHtcbiAgICBjbG9zZUNhbGxiYWNrKFwiZ28gYmFja1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFwMigpIHtcbiAgICBjbG9zZUNhbGxiYWNrKFwibmV4dCBwYWdlXCIpO1xuXG59Il19